import org.gradle.api.tasks.Exec
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    ext {
    	npmCommand = Os.isFamily(Os.FAMILY_WINDOWS) ? 'npm.cmd' : 'npm'
		bowerCommand = Os.isFamily(Os.FAMILY_WINDOWS) ? 'bower.cmd' : 'bower'
        springBootVersion = '1.2.7.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath('io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'io.spring.dependency-management' 
apply plugin: 'war'



war {
    baseName = 'demo'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8


ant.importBuild 'nutch/build.xml'


repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}


configurations {
    deployerJars
    all*.exclude group: 'org.slf4j', module: 'log4j'
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-ws')
    compile ("org.projectlombok:lombok:1.16.6")
    compile('org.jsoup:jsoup:1.8.2')
    compile 'com.google.guava:guava:19.0-rc2'
    compile('org.apache.nutch:nutch:2.3')
    compile 'org.mongodb:mongo-java-driver:3.0.4'
    providedRuntime('org.springframework.boot:spring-boot-starter')
    testCompile('org.springframework.boot:spring-boot-starter-test') 
}
configurations {
  runtime.exclude group: "org.slf4j", module: "slf4j-log4j12"
}

eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}


// Get the path for the locally installed binaries
task npmBin << {
	new ByteArrayOutputStream().withStream { os ->
		exec {
			executable = npmCommand
			args = ['bin']
			standardOutput = os
		}
		ext.binPath = os.toString().trim() + File.separator
	}
}

// Install packages from package.json
task npm(type: Exec) {
	description = "Grab NodeJS dependencies (from package.json)"
	commandLine = [npmCommand, "install"]
	inputs.file "package.json"
	outputs.dir "node_modules"

	tasks.npmBin.execute()

}


// Install the bower components for front-end library management
task bower(dependsOn: 'npm', type: Exec){
	commandLine "${npmBin.binPath}${bowerCommand}", 'install'
}
